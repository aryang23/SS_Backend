Q. What happens before?
1. Data Redundancy
2. Data inconsistency
3. Difficult to data access
4. Security
6. Data Concurrent Access -> How 2 persons will be able to access the data


Database is nothing but a shared collection of data

Then managing systems was hard

Then DBMS was there
Database Management systems

They help us to create, fetch and maintain data in Database

Database is just a collection of data

Problems they solve
1. Control Data Redundancy(Faltu Data) -> Normalization which helps in solving that a lot

2. It helps us to put constraints

3. Maintains Restriction of unauthroized access

4. Easy Backup and Recovery Functionality

Data Redundancy can lead to Data Inconsistency


Database Management Systems

RDBMS
Relational Database Management Systems which maintains data in form of tables

We store data in form of tables
EG. MySQL, PgSQL, Oracle SQL, Sqlite

SQL Standards

SQL => Structured Query Language

New Language to interact with Databases

SQL is Declarative Language => We don't tell how to do something, we tell what we want to do
We don't write logic, we write what we want to do

MySQL is a software
SQL is a language that MySQL will be going to support
But It might not support all the features
So, Its based on Softwares


Anyone of DB well


MySQL Very Simple, Quite Scalable and Good Community Support

CASE Insensitive
Semicolon is necessary


* Commands

1. List all the databases
show databases;

2. Create a database
CREATE DATABASE <name of database>;
CREATE DATABASE Blogging;

3. Use that Database/ Start working on the DB
USE <database name>;
USE Blogging;

4. DELETE a Datavase
DROP DATABASE <db name>;
DROP DATABASE Blogging;

RDBMS in Tables

Property will be in columns
Columns defines Attributes

Every Row actually defines every blog or every entry

5. List all tables
SHOW TABLES;

6. Creating a Table
CREATE TABLE <tablename> (attributename attributetype extra_properties_for_attribute);

CREATE TABLE BLOGS (title VARCHAR(50),
id Int,
content VARCHAR(1200)
);

//String => VARCAHR

7. Delete a table
DROP TABLE Blogs;

8. Descrive
describe <tablename>;


//Movies DB
1. CREATE DATABASE Movies;
2. USE Movies;

Diff Datatypes
1. Numeric => INT, Decimal, BIGINT
2. STRING => CHAR, VARCHAR, ENUM etc
3. Datetime => Date, Time, DATETIME
4. JSON

CREATE TABLE Actors (
    Name VarChar(20),
    Gender ENUM("Male", "Female", "Trans"),
    Charges Decimal;
);


DESCRIBE:
DESCRIBE Actors; or
DESC Actors;


CREATE TABLE Actors (
    Name VarChar(20) NOT NULL,
    Gender ENUM("Male", "Female", "Trans") NOT NULL,
    Charges Decimal,
    ID Int AUTO_INCREMENT UNIQUE,
);


CREATE TABLE Actors (
    Name VarChar(20) NOT NULL,
    Gender ENUM("Male", "Female", "Trans") NOT NULL,
    Charges Decimal,
    ID Int AUTO_INCREMENT UNIQUE,
    Primary Key(ID)
);

CREATE TABLE IF NOT EXISTS Actors (...);


* INSERT DATA IN DB

Insert INTO <TableName> (NAME, Charges, GENDER) VALUES ("Aryan", 20CR, "MALE");

Insert INTO <TableName> (NAME, Charges, GENDER) VALUES ("Aryan", 20CR, "MALE"), ("Grover", 30CR, "FEMALE");


* GET THE Data
SELECT is for retreving the data

SELECT <attr1, attr2> from <tablename>;
SELECT NAME, GENDER FROM ACTORS;

For Getting all
SELECT * FROM <tablename>;
SELECT * FROM <actors>;



***
* DB2 

WHERE Clause
SELECT * FROM ACTORS WHERE CHARGES >= 350000;

Operators
>, <, >=, ..., =(equals), <>(not equals), IN, LIKE

SELECT * FROM ACTORS WHERE Name like "C%";

SELECT * from ACTORS Where Name like "%depp"


Combining Queries
Select * from actors where charges >= 350000 and id<4;
Select * from actors where NOT(charges>=35000 XOR Id<4>);



ORDER BY
Select * from actors Order By Charges;
Select * from actors Order By Charges DESC;


UPDATE 
UPDATE Actors Set Name = "Chris" WHERE Name="CE"

Adding Extra Column
ALTER Commands
ALTER TABLE Actors Add Dob Datetime;

Alter Table Actors Drop Dob;

LIMIT 2 for showing only 2 records
OFFSET 2 for starting from that Index


KEYS are coming:
Foreign Key is a column which is actually a primary key in another column


ORM => Object Relational Mapper

Libraries that help you to actually do database queries but instead of writing SQL Syntax, we write Object oriented syntax.


